import 'package:flutter/material.dart';

void main() => runApp(HomePage());
double sliderValue = 3.9;

double statusBarHeight = 0;
double firstRowHeight = 0;
double sh;

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(home: homie());
  }
}

class homie extends StatefulWidget {
  @override
  _homieState createState() => _homieState();
}

class _homieState extends State<homie> {
  @override
  Widget build(BuildContext context) {
    screenSize(context);
    screenHeight(context);
    screenWidth(context);
    statusBarHeight = StatusBarHeight(context);
    return Scaffold(
      body: Container(
        child: CustomPaint(
            painter: ShapesPainter(),
            child: Container(
                height: 1000,
                width: 1000,
                child: Column(
                  children: <Widget>[
                    SizedBox(height: statusBarHeight),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: <Widget>[
                        SizedBox(height: firstRowHeight, width: 5),
                        Column(
                          children: <Widget>[
                            Container(
                              width: screenWidth(context) / 9,
                              height: screenWidth(context) / 9,
                              child: IconButton(
                                  onPressed: () {},
                                  icon: Image(
                                    image: AssetImage("images/menu.png"),
                                  )),
                            ),
                            SizedBox(
                              height :(firstRowHeight - screenWidth(context)/9)*0.5,
                            )
                          ],
                        ),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(55, 0, 58, 0),
                          child: Container(
                            height: 57,
                            child: textWithStroke(
                              fontSize: 63,
                              text: " CARDS ",
                              fontFamily: "Canin",
                              textColor: Colors.white,
                              strokeWidth: 2,
                              strokeColor: Colors.white,
                              fontWeight: FontWeight.normal,
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.fromLTRB(0, 6, 0, 0),
                          child: Container(
                            width: 40,
                            child: IconButton(
                                onPressed: () {},
                                icon: Image(
                                  image: AssetImage("images/add.png"),
                                )),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(
                      height: sh * (1 / 7 - 1 / 13),
                      child: Visibility(
                        visible: false,
                        maintainInteractivity: true,
                        maintainSize: true,
                        maintainAnimation: true,
                        maintainState: true,
                        maintainSemantics: true,
                        child: Slider(
                          min: 1,
                          max: 7,
                          value: sliderValue,
                          onChanged: (newValue) {
                            setState(() {
                              if (newValue != 0) sliderValue = newValue;
                            });
                          },
                        ),
                      ),
                    ),
                    SizedBox(height: sh * (1 / 7 - 1 / 13) * 3 / 5),
                    Padding(
                      padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                      child: Container(
                        height: screenHeight(context) * 0.69,
                        child: GridView.count(
                          crossAxisCount: (sliderValue).toInt(),
                          children: List.generate(100, (index) {
//                        index % 3 == 0 ? t = 10 : t = 0;

                            return GestureDetector(
                              child: GridTile(
                                child: Padding(
                                  padding: EdgeInsets.all(
                                      8.0 * 3 / (sliderValue).toInt()),
                                  child: CircleAvatar(
                                    radius: 43 * 3 / (sliderValue).toInt(),
                                    backgroundImage:
                                        AssetImage("images/male_profile.jpg"),
                                  ),
                                ),
                              ),
                              onTap: () {
                                print("yo $index");
                              },
                            );
                          }),
                        ),
                      ),
                    ),
                  ],
                ))),
      ),
    );
  }
}

//https://medium.com/flutter-community/a-guide-to-using-screensize-in-flutter-a-more-readable-approach-901e82556195
Size screenSize(BuildContext context) {
  return MediaQuery.of(context).size;
}

double screenHeight(BuildContext context, {double dividedBy = 1}) {
  sh = screenSize(context).height;
  return screenSize(context).height / dividedBy;
}

double screenWidth(BuildContext context, {double dividedBy = 1}) {
  return screenSize(context).width / dividedBy;
}

double StatusBarHeight(BuildContext context) {
  return MediaQuery.of(context).padding.top;
}

class GridPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    var paint = new Paint();
    paint.color = Colors.white;
    paint.style = PaintingStyle.stroke;
    paint.strokeWidth = 5;
    var path = new Path();
    path.lineTo(100, 100);
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}

class ShapesPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    Rect ovalL, ovalR;
    Rect rect = new Rect.fromLTWH(0, 0, size.width, 1000);
//    Rect rect2 =
//        new Rect.fromLTWH(0, size.height / 13, size.width, size.height / 20);
    Gradient gradientBG = new LinearGradient(
        colors: <Color>[const Color(0xFF1ca7ce), const Color(0xFF787ff6)],
        begin: FractionalOffset.centerRight,
        end: FractionalOffset.centerLeft,
        stops: [0.0, 1.0],
        tileMode: TileMode.clamp);

    Gradient gradientSlider = new LinearGradient(
      colors: [
        const Color(0xFFad1457),
        const Color(0xFFe94057),
        const Color(0xFFeb5f2d),
        const Color(0xFFeb892d),
        const Color(0xFFeb5f2d),
        const Color(0xFFe94057),
        const Color(0xFF8a2387),
      ],
      begin: FractionalOffset.centerLeft,
      end: FractionalOffset.centerRight,
      stops: [
        0.0,
        ((sliderValue - 1) / 6) - 0.1,
        ((sliderValue - 1) / 6) - 0.05,
        ((sliderValue - 1) / 6),
        ((sliderValue - 1) / 6) + 0.05,
        ((sliderValue - 1) / 6) + 0.1,
        1
      ],
    );

    // create the Shader from the gradient and the bounding square
    final Paint paint1 = new Paint()..shader = gradientBG.createShader(rect);

    var paint2 = new Paint();
    // paint.color = Colors.green[800];
    paint2..shader = gradientSlider.createShader(rect);
    paint2.style = PaintingStyle.fill; // Change this to fill

    var paint3 = new Paint();
    paint3.color = Colors.white;
    paint3.style = PaintingStyle.stroke;
    paint3.strokeWidth = 5;

    var paint4 = new Paint();
    paint4.color = Colors.white;
    paint4.style = PaintingStyle.fill;
    //    var path = Path();
//
//    path.moveTo(0, size.height / 8);
//    path.quadraticBezierTo(
//        size.width / 2, size.height / 6, size.width, size.height / 8);
//    path.quadraticBezierTo(size.width, size.height, 0, size.height * 0.25);

    // main heading
    var path1 = Path();
//amazing curvy heading
//    path1.moveTo(size.width / 4, 0);
//    path1.quadraticBezierTo(size.width / 4 + size.width / 20, size.height / 100,
//        size.width / 4 + size.width / 20, size.height / 30);
//    path1.lineTo(
//        size.width / 4 + size.width / 20, size.height / 30 + size.height / 50);
//    path1.quadraticBezierTo(size.width / 4 + size.width / 20,
//        size.height / 11 + 5, size.width / 2, size.height / 10.5);
//    path1.quadraticBezierTo(
//        size.width - size.width / 4 - size.width / 20,
//        size.height / 11 + 5,
//        size.width - size.width / 4 - size.width / 20,
//        size.height / 30 + size.height / 50);
//    path1.lineTo(
//        size.width - size.width / 4 - size.width / 20, size.height / 30);
//    path1.quadraticBezierTo(
//        0.7 * size.width, size.height / 100, size.width * 3 / 4, 0);
    path1.moveTo(size.width / 4, statusBarHeight);
    path1.quadraticBezierTo(
        size.width / 4 + size.width / 20,
        size.height / 11 + 5 + statusBarHeight,
        size.width / 2,
        size.height / 10.5 + statusBarHeight);
    path1.quadraticBezierTo(
        size.width - size.width / 4 - size.width / 20,
        size.height / 11 + 5 + statusBarHeight,
        size.width * 3 / 4,
        0 + statusBarHeight);
    path1.moveTo(size.width / 4 + 5, 0 + statusBarHeight);
    path1.quadraticBezierTo(
        size.width / 4 + size.width / 20,
        size.height / 11 + 5 + statusBarHeight,
        size.width / 2,
        size.height / 10.5 + statusBarHeight);
    path1.quadraticBezierTo(
        size.width - size.width / 4 - size.width / 20,
        size.height / 11 + 5 + statusBarHeight,
        size.width * 3 / 4 - 5,
        0 + statusBarHeight);

    ovalL = new Rect.fromLTWH(size.width / 4 + 0.5, statusBarHeight,
        size.width / 80, size.width / 80);
    ovalR = new Rect.fromLTWH(size.width * 3 / 4 - 5, statusBarHeight,
        size.width / 80, size.width / 80);

    path1.addOval(ovalL);
    path1.addOval(ovalR);

    var path2 = Path();

    path2.moveTo(0, size.height / 13 + statusBarHeight);
    path2.quadraticBezierTo(size.width / 2, size.height / 8 + statusBarHeight,
        size.width, size.height / 13 + statusBarHeight);
    path2.lineTo(size.width, size.height / 7 + statusBarHeight);
    path2.quadraticBezierTo(size.width / 2, size.height / 13 + statusBarHeight,
        0, size.height / 7 + statusBarHeight);
    path2.lineTo(0, size.height / 13 + statusBarHeight);
    ovalL = new Rect.fromLTWH(
        5, 10 + statusBarHeight, size.width / 9, size.width / 9);
    ovalR = new Rect.fromLTWH(size.width - size.width / 9 - 5,
        10 + statusBarHeight, size.width / 9, size.width / 9);

    path2.addOval(ovalL);
    path2.addOval(ovalR);

    var path3 = Path();
    path3.moveTo(0, size.height / 25 + statusBarHeight);
    path3.quadraticBezierTo(size.width / 2, size.height / 6.7 + statusBarHeight,
        size.width, size.height / 25 + statusBarHeight);
    path3.lineTo(size.width, size.height / 5 + statusBarHeight);
    path3.quadraticBezierTo(size.width / 2, size.height / 28 + statusBarHeight,
        0, size.height / 5 + statusBarHeight);
    path3.lineTo(0, size.height / 13 + statusBarHeight);

    ovalL = new Rect.fromLTWH(
        3, 7.5 + statusBarHeight, size.width / 8, size.width / 8);
    ovalR = new Rect.fromLTWH(size.width - size.width / 8 - 2.5,
        7.5 + statusBarHeight, size.width / 8, size.width / 8);

    firstRowHeight = 11 + size.width / 8;

    path3.addOval(ovalL);
    path3.addOval(ovalR);

    path3.moveTo(0, size.height * 9 / 10);
    path3.quadraticBezierTo(size.width / 2, size.height + 40 + statusBarHeight,
        size.width, size.height * 9 / 10);
    path3.lineTo(size.width, size.height + statusBarHeight);
    path3.lineTo(0, size.height + statusBarHeight);
    path3.lineTo(0, size.height * 9 / 10 + statusBarHeight);

    canvas.drawRect(rect, paint1);

    canvas.drawPath(path3, paint4);

    canvas.drawPath(path2, paint2);

    canvas.drawPath(path1, paint3);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}

Widget textWithStroke(
    {String text,
    String fontFamily,
    double fontSize: 12,
    double strokeWidth: 1,
    Color textColor: Colors.white,
    Color strokeColor: Colors.black,
    FontWeight fontWeight: FontWeight.normal,
    FontStyle fontStyle: FontStyle.normal}) {
  return Stack(
    children: <Widget>[
      Text(
        text,
        style: TextStyle(
          fontStyle: fontStyle,
          fontSize: fontSize,
          fontFamily: fontFamily,
          foreground: Paint()
            ..style = PaintingStyle.stroke
            ..strokeWidth = strokeWidth
            ..color = strokeColor,
        ),
      ),
      Text(text,
          style: TextStyle(
              fontStyle: fontStyle,
              fontWeight: fontWeight,
              fontFamily: fontFamily,
              fontSize: fontSize,
              color: textColor)),
    ],
  );
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               